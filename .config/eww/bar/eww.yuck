
(defvar eww "$HOME/.local/bin/eww -c $HOME/.config/eww/bar")

;==================== WIDGETS ====================;

;===== WORKSPACES =====;

(defwidget workspaces_HDMI-0 []
  (literal :content workspace_HDMI-0))
(deflisten workspace_HDMI-0 "scripts/workspace_with_monitor HDMI-0")

(defwidget workspaces_HDMI-1 []
  (literal :content workspace_HDMI-1))
(deflisten workspace_HDMI-1 "scripts/workspace_with_monitor HDMI-1")


;===== CLOCK =====;

(defpoll clock_time :interval "5s" "date +\%I")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10m" "date '+%d/%m'")
(defvar time_rev false)

(defpoll calendar_day :interval "20m" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")


(defwidget clock_module []
  (eventbox :onhover "${eww} update time_rev=true"
            :onhoverlost "${eww} update time_rev=false"
    (box :class "clock" :space-evenly "false" :orientation "h" :spacing "3"
      (label :text clock_time :class "clock_time" )
      (label :text ":" :class "clock_sep" )
      (label :text clock_minute :class "clock_minute")
      (revealer :transition "slideleft"
                :reveal time_rev
                :duration "350ms"
        (button :class "clock_date"
                :onclick "$HOME/.config/eww/bar/scripts/pop calendar" clock_date
          )))))


(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal"
                :day calendar_day
                :year calendar_year))))


;===== VOLUME =====;
;=== volume ===;
(defpoll vol_volume :interval "3s" "pamixer --get-volume")
(defvar vol_rev false)

(defwidget volume []
  (eventbox :onhover "${eww} update vol_rev=true"
            :onhoverlost "${eww} update vol_rev=false"
    (box :class "volume" :space-evenly "false" :orientation "h" :spacing "3"
      (button   :onclick "scripts/pop audio" :class "vol_icon" "墳")
      (revealer :transition "slideleft"
                :reveal vol_rev
                :duration "350ms"
        (scale    :class "volbar"
                  :value vol_volume
                  :orientation "h"
                  :tooltip "${vol_volume}%"
                  :max 150
                  :min 0
                  :onchange "pamixer --set-volume $(echo {} | awk -F. '{print $1}')" )))))

;=== audio ===;
(defvar speaker "alsa_output.pci-0000_01_00.1.hdmi-stereo-extra1")
(defpoll vol_speaker :interval "1s"
  "pamixer --sink alsa_output.pci-0000_01_00.1.hdmi-stereo-extra1 --get-volume")

(defvar headphone "alsa_output.pci-0000_00_1f.3.analog-stereo")
(defpoll vol_headphone :interval "1s"
  "pamixer --sink alsa_output.pci-0000_00_1f.3.analog-stereo --get-volume")

(defvar mic "alsa_input.usb-Jieli_Technology_USB_PHY_2.0-02.mono-fallback")
(defpoll vol_mic :interval "1s"
  "pamixer --source alsa_input.usb-Jieli_Technology_USB_PHY_2.0-02.mono-fallback --get-volume")

(defwidget audio_speaker []
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "audio_speaker_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "audio_speaker_text" :text "speaker" :valign "center" :halign "left" )
        (box :class "audio_speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale  :value vol_speaker
                  :space-evenly "false"
                  :orientation "h"
                  :onchange "pamixer --sink ${speaker} --set-volume $(echo {} | awk -F. '{print $1}')"
                  :tooltip "${vol_speaker}%"
                  :max 150
                  :min 0)))))

(defwidget audio_headphone []
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "audio_headphone_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "audio_headphone_text" :text "headphone" :valign "center" :halign "left" )
        (box :class "audio_headphone_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale  :value vol_headphone
                  :space-evenly "false"
                  :orientation "h"
                  :onchange "pamixer --sink ${headphone} --set-volume $(echo {} | awk -F. '{print $1}')"
                  :tooltip "${vol_headphone}%"
                  :max 150
                  :min 0)))))

(defwidget audio_mic []
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "audio_mic_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "audio_mic_text" :text "mic" :valign "center" :halign "left" )
        (box :class "audio_mic_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale  :value vol_mic
                  :space-evenly "false"
                  :orientation "h"
                  :tooltip "mic on ${vol_mic}%"
                  :onchange "pamixer --source ${mic} --set-volume $(echo {} | awk -F. '{print $1}')"
                  :max 100
                  :min 0)))))

(defwidget audio []
  (box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (audio_speaker)
    (label :text "" :class "audio_sep" :halign "center")
    (audio_headphone)
    (label :text "" :class "audio_sep" :halign "center")
    (audio_mic)))


;===== power =====;
(defwidget power []
  (label :class "power" :text "P"))


;===== SEP =====;

(defwidget sep []
  (box :class "separ" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))


;=====  =====;

(defwidget right []
  (box :orientation "h"
       :space-evenly false
       :halign "end"
       :class "right_class"
    (volume)
    (clock_module)
    (power)
    ))
(defwidget center []
  (box :orientation "h"
       :space-evenly false
       :halign "center"
       :class "centr_class"
    (power)
    ))
(defwidget left0 []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
       :class "left0_class"
    (workspaces_HDMI-0)
    ))
(defwidget left1 []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
       :class "left1_class"
    (workspaces_HDMI-1)
    ))


;=====  =====;

(defwidget all0 []
  (box :orientation "h"
       :class "all0_class"
    (left0)
    (center)
    (right)))
(defwidget all1 []
  (box :orientation "h"
       :class "all1_class"
    (left1)
    (center)
    (right)))


;==================== WINDOWS ====================;

(defwindow bar0
  :monitor 0
  :geometry
  (geometry
    :x "0px"
    :y "8px"
    :width "98%"
    :height "30px"
    :anchor "top center")
  :stacking "bg"
  :wm-ignore false
  :windowtype "dock"
  :reserve (struts :distance "36px" :side "top")
  (all0))

(defwindow bar1
  :monitor 1
  :geometry
  (geometry
    :x "0px"
    :y "8px"
    :width "98%"
    :height "30px"
    :anchor "top center")
  :stacking "bg"
  :wm-ignore false
  :windowtype "dock"
  :reserve (struts :distance "36px" :side "top")
  (all1))



(defwindow calendar
  :geometry (geometry :x "-20px"
    :y "7%"
    :anchor "top right"
    :width "270px"
    :height "60px")
  (cal))
(defwindow audio
  :geometry (geometry :x "-20px"
    :y "7%"
    :anchor "top right"
    :width "280px"
    :height "60px")
  (audio))

