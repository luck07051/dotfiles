#!/bin/sh
#
# The script to manage packages with text file. Inspired by
#   [manage ARCH (or UBUNTU) packages with VIM (or VScode)](https://www.youtube.com/watch?v=H7VgM-08IAA).
#
# This script is designed for Arch, you can adjust the cmd to fit other distro, perhaps.
#
# Usages:
# Use this command after add some packages:
# $ pkg-mgr
#
# Or use `entr` to auto execute:
# $ echo "$XDG_CONFIG_HOME/pkg-mgr/packages" | entr -np pkg-mgr
#
# If you don't want to open a new terminal to install packages, use:
# $ pkg-mgr --no-terminal

install_cmd='paru -S'
remove_cmd='paru -Rns'
list_local_packages_cmd='pacman -Qq'
terminal_cmd="${TERMINAL:-st} -t pkg-mgr -e"

# config file
config="${XDG_CONFIG_HOME:-$HOME/.config}/pkg-mgr/config"
packages="${XDG_CONFIG_HOME:-$HOME/.config}/pkg-mgr/packages"
# cache file
installed_packages="${XDG_CACHE_HOME:-$HOME/.cache}/pkg-mgr/installed_packages"
# temp file
install_packages="/tmp/pkg-mgr_install-packages"
remove_packages="/tmp/pkg-mgr_remove-packages"
local_packages="/tmp/pkg-mgr_local-packages"

quit() {
	rm -f  "$install_packages" "$remove_packages" "$local_packages"
	exit
}

read_char() {
	stty -icanon -echo
	eval "$1=\$(dd bs=1 count=1 2>/dev/null)"
	stty icanon echo
}

# TODO:
parse_config(){
	return
}

check_installed_packages(){
	$list_local_packages_cmd > "$local_packages"
	temp="$(cat "$installed_packages")"
	echo "$temp" | comm - "$local_packages" -1 -2 > "$installed_packages"
}

parse_packages(){
	temp_file="$(mktemp)"

	sed 's/\s*#.*$//' "$packages" |
		tr ' ' '\n' |
		sed '/^\s*$/d' |
		sort |
		uniq > "$temp_file"

	comm "$temp_file" "$installed_packages" -2 -3 > "$install_packages"
	comm "$temp_file" "$installed_packages" -1 -3 > "$remove_packages"

	rm "$temp_file"

	if [ ! -s "$install_packages" ] && [ ! -s "$remove_packages" ]; then
		quit
	fi

	[ -s "$install_packages" ] && check_local_packages '+' "$install_packages"
	[ -s "$remove_packages" ] && check_local_packages '-' "$remove_packages"

	if [ ! -s "$install_packages" ] && [ ! -s "$remove_packages" ]; then
		quit
	fi
}

update_installed_packages(){
	if [ "$1" = '+' ]; then
		temp="$(cat "$installed_packages")"
		echo "$temp" | cat "$2" - | sort | uniq > "$installed_packages"
	elif [ "$1" = '-' ]; then
		while read -r line; do
			sed -i "/^$line\$/d" "$installed_packages"
		done < "$2"
	fi
}

check_local_packages(){
	temp_file1="$(mktemp)"

	if [ "$1" = '+' ]; then
		# already installed packages
		comm "$2" "$local_packages" -1 -2 > "$temp_file1"
	elif [ "$1" = '-' ]; then
		# non exist packages
		comm "$2" "$local_packages" -2 -3 > "$temp_file1"
	fi

	if [ ! -s "$temp_file1" ]; then
		rm "$temp_file1"
		return
	fi

	update_installed_packages "$1" "$temp_file1"

	# update `install_packages` or `remove_packages`
	temp="$(cat "$2")"
	if [ "$1" = '+' ]; then
		echo "$temp" | comm - "$temp_file1" -2 -3 > "$2"
	elif [ "$1" = '-' ]; then
		echo "$temp" | comm - "$temp_file1" -1 -2 > "$2"
	fi

	rm "$temp_file1"
}

install_packages(){
	echo 'The following commands will be execute:'
	if [ -s "$install_packages" ]; then
		install_list="$(tr '\n' ' ' < "$install_packages")"
		echo "  $install_cmd $install_list"
	fi
	if [ -s "$remove_packages" ]; then
		remove_list="$(tr '\n' ' ' < "$remove_packages")"
		echo "  $remove_cmd $remove_list"
	fi
	printf 'Press <Enter> or y to continue.'
	read_char ans
	echo
	case $ans in
		"$(printf '\n')" | 'y') ;;
		*) return
	esac

	if [ -s "$install_packages" ]; then
		echo "$install_cmd $install_list"
		$install_cmd $install_list

		if [ $? -eq 0 ]; then
			update_installed_packages '+' "$install_packages"
			: > "$install_packages"
		fi
	fi

	if [ -s "$remove_packages" ]; then
		echo "$remove_cmd $remove_list"
		$remove_cmd $remove_list

		if [ $? -eq 0 ]; then
			update_installed_packages '-' "$remove_packages"
			: > "$remove_packages"
		fi
	fi
}

check_installation(){
	echo

	[ ! -s "$install_packages" ] && [ ! -s "$remove_packages" ] &&
		echo 'Installation successfully.'

	[ -s "$install_packages" ] &&
		echo "The package not installed: $(tr '\n' ' ' < "$install_packages")"

	[ -s "$remove_packages" ] &&
		echo "The package not removed: $(tr '\n' ' ' < "$remove_packages")"

	# freeze screen
	[ -n "$terminal_cmd" ] && read_char _
}


[ ! -f "$packages" ] && { echo 'Packages list not found.' >&2; exit 1; }
if [ ! -f "$installed_packages" ]; then
	mkdir -p "$(dirname "$installed_packages")"
	touch "$installed_packages"
fi


# for install packages on terminal
if [ "$1" = 'install-on-terminal' ]; then
	install_packages
	check_installation
	exit
fi


#parse_config
check_installed_packages
parse_packages

if [ "$1" = '--no-terminal' ]; then
	install_packages
	check_installation
else
	$terminal_cmd "$0" 'install-on-terminal'
fi

quit
